directive @fromClaim(name: Claim) on VARIABLE_DEFINITION

directive @hooksVariable on VARIABLE_DEFINITION

directive @jsonSchema(
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  title: String
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  description: String
  """
  The value of "multipleOf" MUST be a number, strictly greater than 0.
  
  A numeric instance is valid only if division by this keyword's value
  results in an integer.
  """
  multipleOf: Int
  """
  The value of "maximum" MUST be a number, representing an inclusive
  upper limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is less than or exactly equal to "maximum".
  """
  maximum: Int
  """
  The value of "exclusiveMaximum" MUST be number, representing an
  exclusive upper limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly less than (not equal to) "exclusiveMaximum".
  """
  exclusiveMaximum: Int
  """
  The value of "minimum" MUST be a number, representing an inclusive
  lower limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is greater than or exactly equal to "minimum".
  """
  minimum: Int
  """
  The value of "exclusiveMinimum" MUST be number, representing an
  exclusive lower limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly greater than (not equal to) "exclusiveMinimum".
  """
  exclusiveMinimum: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is less
  than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  """
  maxLength: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is
  greater than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minLength: Int
  """
  The value of this keyword MUST be a string.  This string SHOULD be a
  valid regular expression, according to the ECMA 262 regular
  expression dialect.
  
  A string instance is considered valid if the regular expression
  matches the instance successfully.  Recall: regular expressions are
  not implicitly anchored.
  """
  pattern: String
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "maxItems" if its size is less
  than, or equal to, the value of this keyword.
  """
  maxItems: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "minItems" if its size is greater
  than, or equal to, the value of this keyword.
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minItems: Int
  """
  The value of this keyword MUST be a boolean.
  
  If this keyword has boolean value false, the instance validates
  successfully.  If it has boolean value true, the instance validates
  successfully if all of its elements are unique.
  
  Omitting this keyword has the same behavior as a value of false.
  """
  uniqueItems: Boolean
  commonPattern: COMMON_REGEX_PATTERN
) on VARIABLE_DEFINITION

directive @rbac(
  """the user must match all roles"""
  requireMatchAll: [WG_ROLE]
  """the user must match at least one of the roles"""
  requireMatchAny: [WG_ROLE]
  """the user must not match all of the roles"""
  denyMatchAll: [WG_ROLE]
  """the user must not match any of the roles"""
  denyMatchAny: [WG_ROLE]
) on QUERY | MUTATION | SUBSCRIPTION

input NestedIntFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input IntFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input MessagesListRelationFilter {
  every: messagesWhereInput
  some: messagesWhereInput
  none: messagesWhereInput
}

input usersWhereInput {
  AND: usersWhereInput
  OR: [usersWhereInput]
  NOT: usersWhereInput
  id: IntFilter
  email: StringFilter
  name: StringFilter
  messages: MessagesListRelationFilter
}

input UsersRelationFilter {
  is: usersWhereInput
  isNot: usersWhereInput
}

input messagesWhereInput {
  AND: messagesWhereInput
  OR: [messagesWhereInput]
  NOT: messagesWhereInput
  id: IntFilter
  user_id: IntFilter
  message: StringFilter
  users: UsersRelationFilter
}

enum SortOrder {
  asc
  desc
}

input messagesOrderByRelationAggregateInput {
  _count: SortOrder
}

input usersOrderByWithRelationInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  messages: messagesOrderByRelationAggregateInput
}

input messagesOrderByWithRelationInput {
  id: SortOrder
  user_id: SortOrder
  message: SortOrder
  users: usersOrderByWithRelationInput
}

input messagesWhereUniqueInput {
  id: Int
}

enum MessagesScalarFieldEnum {
  id
  user_id
  message
}

type UsersCountOutputType {
  messages: Int!
}

type users {
  id: Int!
  email: String!
  name: String!
  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]
  _count: UsersCountOutputType
}

type messages {
  id: Int!
  user_id: Int!
  message: String!
  users: users!
}

type MessagesCountAggregateOutputType {
  id: Int!
  user_id: Int!
  message: Int!
  _all: Int!
}

type MessagesAvgAggregateOutputType {
  id: Float
  user_id: Float
}

type MessagesSumAggregateOutputType {
  id: Int
  user_id: Int
}

type MessagesMinAggregateOutputType {
  id: Int
  user_id: Int
  message: String
}

type MessagesMaxAggregateOutputType {
  id: Int
  user_id: Int
  message: String
}

type AggregateMessages {
  _count: MessagesCountAggregateOutputType
  _avg: MessagesAvgAggregateOutputType
  _sum: MessagesSumAggregateOutputType
  _min: MessagesMinAggregateOutputType
  _max: MessagesMaxAggregateOutputType
}

input messagesCountOrderByAggregateInput {
  id: SortOrder
  user_id: SortOrder
  message: SortOrder
}

input messagesAvgOrderByAggregateInput {
  id: SortOrder
  user_id: SortOrder
}

input messagesMaxOrderByAggregateInput {
  id: SortOrder
  user_id: SortOrder
  message: SortOrder
}

input messagesMinOrderByAggregateInput {
  id: SortOrder
  user_id: SortOrder
  message: SortOrder
}

input messagesSumOrderByAggregateInput {
  id: SortOrder
  user_id: SortOrder
}

input messagesOrderByWithAggregationInput {
  id: SortOrder
  user_id: SortOrder
  message: SortOrder
  _count: messagesCountOrderByAggregateInput
  _avg: messagesAvgOrderByAggregateInput
  _max: messagesMaxOrderByAggregateInput
  _min: messagesMinOrderByAggregateInput
  _sum: messagesSumOrderByAggregateInput
}

input NestedFloatFilter {
  equals: Float
  in: [Float]
  notIn: [Float]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedIntWithAggregatesFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input IntWithAggregatesFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input messagesScalarWhereWithAggregatesInput {
  AND: messagesScalarWhereWithAggregatesInput
  OR: [messagesScalarWhereWithAggregatesInput]
  NOT: messagesScalarWhereWithAggregatesInput
  id: IntWithAggregatesFilter
  user_id: IntWithAggregatesFilter
  message: StringWithAggregatesFilter
}

type MessagesGroupByOutputType {
  id: Int!
  user_id: Int!
  message: String!
  _count: MessagesCountAggregateOutputType
  _avg: MessagesAvgAggregateOutputType
  _sum: MessagesSumAggregateOutputType
  _min: MessagesMinAggregateOutputType
  _max: MessagesMaxAggregateOutputType
}

input usersWhereUniqueInput {
  id: Int
  email: String
}

enum UsersScalarFieldEnum {
  id
  email
  name
}

type UsersCountAggregateOutputType {
  id: Int!
  email: Int!
  name: Int!
  _all: Int!
}

type UsersAvgAggregateOutputType {
  id: Float
}

type UsersSumAggregateOutputType {
  id: Int
}

type UsersMinAggregateOutputType {
  id: Int
  email: String
  name: String
}

type UsersMaxAggregateOutputType {
  id: Int
  email: String
  name: String
}

type AggregateUsers {
  _count: UsersCountAggregateOutputType
  _avg: UsersAvgAggregateOutputType
  _sum: UsersSumAggregateOutputType
  _min: UsersMinAggregateOutputType
  _max: UsersMaxAggregateOutputType
}

input usersCountOrderByAggregateInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
}

input usersAvgOrderByAggregateInput {
  id: SortOrder
}

input usersMaxOrderByAggregateInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
}

input usersMinOrderByAggregateInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
}

input usersSumOrderByAggregateInput {
  id: SortOrder
}

input usersOrderByWithAggregationInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  _count: usersCountOrderByAggregateInput
  _avg: usersAvgOrderByAggregateInput
  _max: usersMaxOrderByAggregateInput
  _min: usersMinOrderByAggregateInput
  _sum: usersSumOrderByAggregateInput
}

input usersScalarWhereWithAggregatesInput {
  AND: usersScalarWhereWithAggregatesInput
  OR: [usersScalarWhereWithAggregatesInput]
  NOT: usersScalarWhereWithAggregatesInput
  id: IntWithAggregatesFilter
  email: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type UsersGroupByOutputType {
  id: Int!
  email: String!
  name: String!
  _count: UsersCountAggregateOutputType
  _avg: UsersAvgAggregateOutputType
  _sum: UsersSumAggregateOutputType
  _min: UsersMinAggregateOutputType
  _max: UsersMaxAggregateOutputType
}

type Query {
  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages
  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!
  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!
  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!
  findUniquemessages(where: messagesWhereUniqueInput!): messages
  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users
  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!
  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!
  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!
  findUniqueusers(where: usersWhereUniqueInput!): users
}

input usersCreateWithoutMessagesInput {
  email: String!
  name: String!
}

input usersCreateOrConnectWithoutMessagesInput {
  where: usersWhereUniqueInput!
  create: usersCreateWithoutMessagesInput!
}

input usersCreateNestedOneWithoutMessagesInput {
  create: usersCreateWithoutMessagesInput
  connectOrCreate: usersCreateOrConnectWithoutMessagesInput
  connect: usersWhereUniqueInput
}

input messagesCreateInput {
  message: String!
  users: usersCreateNestedOneWithoutMessagesInput!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input usersUpdateWithoutMessagesInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input usersUpsertWithoutMessagesInput {
  update: usersUpdateWithoutMessagesInput!
  create: usersCreateWithoutMessagesInput!
}

input usersUpdateOneRequiredWithoutMessagesInput {
  create: usersCreateWithoutMessagesInput
  connectOrCreate: usersCreateOrConnectWithoutMessagesInput
  upsert: usersUpsertWithoutMessagesInput
  connect: usersWhereUniqueInput
  update: usersUpdateWithoutMessagesInput
}

input messagesUpdateInput {
  message: StringFieldUpdateOperationsInput
  users: usersUpdateOneRequiredWithoutMessagesInput
}

input messagesCreateManyInput {
  id: Int
  user_id: Int!
  message: String!
}

type AffectedRowsOutput {
  count: Int!
}

input messagesUpdateManyMutationInput {
  message: StringFieldUpdateOperationsInput
}

input messagesCreateWithoutUsersInput {
  message: String!
}

input messagesCreateOrConnectWithoutUsersInput {
  where: messagesWhereUniqueInput!
  create: messagesCreateWithoutUsersInput!
}

input messagesCreateManyUsersInput {
  id: Int
  message: String!
}

input messagesCreateManyUsersInputEnvelope {
  data: [messagesCreateManyUsersInput]!
  skipDuplicates: Boolean
}

input messagesCreateNestedManyWithoutUsersInput {
  create: messagesCreateWithoutUsersInput
  connectOrCreate: messagesCreateOrConnectWithoutUsersInput
  createMany: messagesCreateManyUsersInputEnvelope
  connect: messagesWhereUniqueInput
}

input usersCreateInput {
  email: String!
  name: String!
  messages: messagesCreateNestedManyWithoutUsersInput
}

input messagesUpdateWithoutUsersInput {
  message: StringFieldUpdateOperationsInput
}

input messagesUpsertWithWhereUniqueWithoutUsersInput {
  where: messagesWhereUniqueInput!
  update: messagesUpdateWithoutUsersInput!
  create: messagesCreateWithoutUsersInput!
}

input messagesUpdateWithWhereUniqueWithoutUsersInput {
  where: messagesWhereUniqueInput!
  data: messagesUpdateWithoutUsersInput!
}

input messagesScalarWhereInput {
  AND: messagesScalarWhereInput
  OR: [messagesScalarWhereInput]
  NOT: messagesScalarWhereInput
  id: IntFilter
  user_id: IntFilter
  message: StringFilter
}

input messagesUpdateManyWithWhereWithoutUsersInput {
  where: messagesScalarWhereInput!
  data: messagesUpdateManyMutationInput!
}

input messagesUpdateManyWithoutUsersInput {
  create: messagesCreateWithoutUsersInput
  connectOrCreate: messagesCreateOrConnectWithoutUsersInput
  upsert: messagesUpsertWithWhereUniqueWithoutUsersInput
  createMany: messagesCreateManyUsersInputEnvelope
  connect: messagesWhereUniqueInput
  set: messagesWhereUniqueInput
  disconnect: messagesWhereUniqueInput
  delete: messagesWhereUniqueInput
  update: messagesUpdateWithWhereUniqueWithoutUsersInput
  updateMany: messagesUpdateManyWithWhereWithoutUsersInput
  deleteMany: messagesScalarWhereInput
}

input usersUpdateInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  messages: messagesUpdateManyWithoutUsersInput
}

input usersCreateManyInput {
  id: Int
  email: String!
  name: String!
}

input usersUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

type Mutation {
  createOnemessages(data: messagesCreateInput!): messages
  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages
  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput
  deleteOnemessages(where: messagesWhereUniqueInput!): messages
  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages
  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput
  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput
  createOneusers(data: usersCreateInput!): users
  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users
  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput
  deleteOneusers(where: usersWhereUniqueInput!): users
  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users
  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput
  deleteManyusers(where: usersWhereInput): AffectedRowsOutput
}

scalar DateTime

scalar Json

scalar UUID

scalar BigInt

enum Claim {
  EMAIL
  EMAIL_VERIFIED
  NAME
  NICKNAME
  LOCATION
  PROVIDER
}

enum COMMON_REGEX_PATTERN {
  EMAIL
  DOMAIN
}

enum WG_ROLE {
  admin
  user
}
