{
  "apiName": "api",
  "apiId": "",
  "deploymentName": "main",
  "environmentIds": [
    ""
  ],
  "api": {
    "enableGraphqlEndpoint": false,
    "operations": [
      {
        "content": "mutation AddMessage($email: String! @fromClaim(name: EMAIL), $name: String! @fromClaim(name: NAME), $message: String!) {\n  createOnemessages(\n    data: {message: $message, users: {connectOrCreate: {create: {name: $name, email: $email}, where: {email: $email}}}}\n  ) {\n    id\n    message\n  }\n}\n",
        "name": "AddMessage",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"createOnemessages\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"message\"]}},\"additionalProperties\":false}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"message\"]}",
        "operationType": 1,
        "cacheConfig": {
          "enable": false,
          "maxAge": 0,
          "public": false,
          "staleWhileRevalidate": 0
        },
        "authenticationConfig": {
          "authRequired": true
        },
        "authorizationConfig": {
          "claims": [
            {
              "variableName": "email",
              "claim": 0
            },
            {
              "variableName": "name",
              "claim": 2
            }
          ],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          }
        }
      },
      {
        "content": "query Messages {\n  findManymessages(take: 20, orderBy: [{id: desc}]) {\n    id\n    message\n    users {\n      id\n      name\n    }\n  }\n}\n",
        "name": "Messages",
        "responseSchema": "{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"findManymessages\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"},\"users\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"}},\"additionalProperties\":false,\"required\":[\"id\",\"name\"]}},\"additionalProperties\":false,\"required\":[\"id\",\"message\",\"users\"]}}},\"additionalProperties\":false,\"required\":[\"findManymessages\"]}},\"additionalProperties\":false}",
        "variablesSchema": "{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false}",
        "operationType": 0,
        "cacheConfig": {
          "enable": false,
          "maxAge": 60,
          "public": true,
          "staleWhileRevalidate": 60
        },
        "authenticationConfig": {
          "authRequired": false
        },
        "authorizationConfig": {
          "claims": [],
          "roleConfig": {
            "requireMatchAll": [],
            "requireMatchAny": [],
            "denyMatchAll": [],
            "denyMatchAny": []
          }
        },
        "liveQueryConfig": {
          "enable": true,
          "pollingIntervalSeconds": 2
        },
        "hooksConfiguration": {
          "preResolve": false,
          "postResolve": false,
          "mutatingPreResolve": false,
          "mutatingPostResolve": false,
          "mockResolve": {
            "enable": false,
            "subscriptionPollingIntervalMillis": 0
          }
        }
      }
    ],
    "engineConfiguration": {
      "defaultFlushInterval": 500,
      "graphqlSchema": "directive @fromClaim(name: Claim) on VARIABLE_DEFINITION\n\ndirective @hooksVariable on VARIABLE_DEFINITION\n\ndirective @jsonSchema(\n  \"\"\"\n  The value of both of these keywords MUST be a string.\n  \n  Both of these keywords can be used to decorate a user interface with\n  information about the data produced by this user interface.  A title\n  will preferably be short, whereas a description will provide\n  explanation about the purpose of the instance described by this\n  schema.\n  \"\"\"\n  title: String\n  \"\"\"\n  The value of both of these keywords MUST be a string.\n  \n  Both of these keywords can be used to decorate a user interface with\n  information about the data produced by this user interface.  A title\n  will preferably be short, whereas a description will provide\n  explanation about the purpose of the instance described by this\n  schema.\n  \"\"\"\n  description: String\n  \"\"\"\n  The value of \"multipleOf\" MUST be a number, strictly greater than 0.\n  \n  A numeric instance is valid only if division by this keyword's value\n  results in an integer.\n  \"\"\"\n  multipleOf: Int\n  \"\"\"\n  The value of \"maximum\" MUST be a number, representing an inclusive\n  upper limit for a numeric instance.\n  \n  If the instance is a number, then this keyword validates only if the\n  instance is less than or exactly equal to \"maximum\".\n  \"\"\"\n  maximum: Int\n  \"\"\"\n  The value of \"exclusiveMaximum\" MUST be number, representing an\n  exclusive upper limit for a numeric instance.\n  \n  If the instance is a number, then the instance is valid only if it\n  has a value strictly less than (not equal to) \"exclusiveMaximum\".\n  \"\"\"\n  exclusiveMaximum: Int\n  \"\"\"\n  The value of \"minimum\" MUST be a number, representing an inclusive\n  lower limit for a numeric instance.\n  \n  If the instance is a number, then this keyword validates only if the\n  instance is greater than or exactly equal to \"minimum\".\n  \"\"\"\n  minimum: Int\n  \"\"\"\n  The value of \"exclusiveMinimum\" MUST be number, representing an\n  exclusive lower limit for a numeric instance.\n  \n  If the instance is a number, then the instance is valid only if it\n  has a value strictly greater than (not equal to) \"exclusiveMinimum\".\n  \"\"\"\n  exclusiveMinimum: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  A string instance is valid against this keyword if its length is less\n  than, or equal to, the value of this keyword.\n  \n  The length of a string instance is defined as the number of its\n  characters as defined by RFC 7159 [RFC7159].\n  \"\"\"\n  maxLength: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  A string instance is valid against this keyword if its length is\n  greater than, or equal to, the value of this keyword.\n  \n  The length of a string instance is defined as the number of its\n  characters as defined by RFC 7159 [RFC7159].\n  \n  Omitting this keyword has the same behavior as a value of 0.\n  \"\"\"\n  minLength: Int\n  \"\"\"\n  The value of this keyword MUST be a string.  This string SHOULD be a\n  valid regular expression, according to the ECMA 262 regular\n  expression dialect.\n  \n  A string instance is considered valid if the regular expression\n  matches the instance successfully.  Recall: regular expressions are\n  not implicitly anchored.\n  \"\"\"\n  pattern: String\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  An array instance is valid against \"maxItems\" if its size is less\n  than, or equal to, the value of this keyword.\n  \"\"\"\n  maxItems: Int\n  \"\"\"\n  The value of this keyword MUST be a non-negative integer.\n  \n  An array instance is valid against \"minItems\" if its size is greater\n  than, or equal to, the value of this keyword.\n  \n  Omitting this keyword has the same behavior as a value of 0.\n  \"\"\"\n  minItems: Int\n  \"\"\"\n  The value of this keyword MUST be a boolean.\n  \n  If this keyword has boolean value false, the instance validates\n  successfully.  If it has boolean value true, the instance validates\n  successfully if all of its elements are unique.\n  \n  Omitting this keyword has the same behavior as a value of false.\n  \"\"\"\n  uniqueItems: Boolean\n  commonPattern: COMMON_REGEX_PATTERN\n) on VARIABLE_DEFINITION\n\ndirective @rbac(\n  \"\"\"the user must match all roles\"\"\"\n  requireMatchAll: [WG_ROLE]\n  \"\"\"the user must match at least one of the roles\"\"\"\n  requireMatchAny: [WG_ROLE]\n  \"\"\"the user must not match all of the roles\"\"\"\n  denyMatchAll: [WG_ROLE]\n  \"\"\"the user must not match any of the roles\"\"\"\n  denyMatchAny: [WG_ROLE]\n) on QUERY | MUTATION | SUBSCRIPTION\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: messagesCreateWithoutUsersInput!\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: messagesCreateWithoutUsersInput\n  connectOrCreate: messagesCreateOrConnectWithoutUsersInput\n  createMany: messagesCreateManyUsersInputEnvelope\n  connect: messagesWhereUniqueInput\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: messagesUpdateWithoutUsersInput!\n  create: messagesCreateWithoutUsersInput!\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: messagesCreateWithoutUsersInput\n  connectOrCreate: messagesCreateOrConnectWithoutUsersInput\n  upsert: messagesUpsertWithWhereUniqueWithoutUsersInput\n  createMany: messagesCreateManyUsersInputEnvelope\n  connect: messagesWhereUniqueInput\n  set: messagesWhereUniqueInput\n  disconnect: messagesWhereUniqueInput\n  delete: messagesWhereUniqueInput\n  update: messagesUpdateWithWhereUniqueWithoutUsersInput\n  updateMany: messagesUpdateManyWithWhereWithoutUsersInput\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar Json\n\nscalar UUID\n\nscalar BigInt\n\nenum Claim {\n  EMAIL\n  EMAIL_VERIFIED\n  NAME\n  NICKNAME\n  LOCATION\n  PROVIDER\n}\n\nenum COMMON_REGEX_PATTERN {\n  EMAIL\n  DOMAIN\n}\n\nenum WG_ROLE {\n  admin\n  user\n}\n",
      "datasourceConfigurations": [
        {
          "kind": 3,
          "rootNodes": [
            {
              "typeName": "Query",
              "fieldNames": [
                "findFirstmessages",
                "findManymessages",
                "aggregatemessages",
                "groupBymessages",
                "findUniquemessages",
                "findFirstusers",
                "findManyusers",
                "aggregateusers",
                "groupByusers",
                "findUniqueusers"
              ]
            },
            {
              "typeName": "Mutation",
              "fieldNames": [
                "createOnemessages",
                "upsertOnemessages",
                "createManymessages",
                "deleteOnemessages",
                "updateOnemessages",
                "updateManymessages",
                "deleteManymessages",
                "createOneusers",
                "upsertOneusers",
                "createManyusers",
                "deleteOneusers",
                "updateOneusers",
                "updateManyusers",
                "deleteManyusers"
              ]
            }
          ],
          "childNodes": [
            {
              "typeName": "UsersCountOutputType",
              "fieldNames": [
                "messages"
              ]
            },
            {
              "typeName": "users",
              "fieldNames": [
                "id",
                "email",
                "name",
                "messages",
                "_count"
              ]
            },
            {
              "typeName": "messages",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "users"
              ]
            },
            {
              "typeName": "MessagesCountAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_all"
              ]
            },
            {
              "typeName": "MessagesAvgAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "MessagesSumAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id"
              ]
            },
            {
              "typeName": "MessagesMinAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "MessagesMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message"
              ]
            },
            {
              "typeName": "AggregateMessages",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "MessagesGroupByOutputType",
              "fieldNames": [
                "id",
                "user_id",
                "message",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "UsersCountAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "_all"
              ]
            },
            {
              "typeName": "UsersAvgAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "UsersSumAggregateOutputType",
              "fieldNames": [
                "id"
              ]
            },
            {
              "typeName": "UsersMinAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name"
              ]
            },
            {
              "typeName": "UsersMaxAggregateOutputType",
              "fieldNames": [
                "id",
                "email",
                "name"
              ]
            },
            {
              "typeName": "AggregateUsers",
              "fieldNames": [
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "UsersGroupByOutputType",
              "fieldNames": [
                "id",
                "email",
                "name",
                "_count",
                "_avg",
                "_sum",
                "_min",
                "_max"
              ]
            },
            {
              "typeName": "AffectedRowsOutput",
              "fieldNames": [
                "count"
              ]
            }
          ],
          "overrideFieldPathFromAlias": false,
          "customDatabase": {
            "databaseQuerystring": "postgresql://admin:admin@localhost:54322/example?schema=public",
            "prismaSchema": "datasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://admin:admin@localhost:54322/example?schema=public\"\n}\n\nmodel messages {\n  id      Int    @id @default(autoincrement())\n  user_id Int\n  message String\n  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  id       Int        @id @default(autoincrement())\n  email    String     @unique\n  name     String\n  messages messages[]\n}\n",
            "graphqlSchema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ninput NestedIntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\ninput IntFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringFilter\n}\n\ninput StringFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringFilter\n}\n\ninput MessagesListRelationFilter {\n  every: messagesWhereInput\n  some: messagesWhereInput\n  none: messagesWhereInput\n}\n\ninput usersWhereInput {\n  AND: usersWhereInput\n  OR: [usersWhereInput]\n  NOT: usersWhereInput\n  id: IntFilter\n  email: StringFilter\n  name: StringFilter\n  messages: MessagesListRelationFilter\n}\n\ninput UsersRelationFilter {\n  is: usersWhereInput\n  isNot: usersWhereInput\n}\n\ninput messagesWhereInput {\n  AND: messagesWhereInput\n  OR: [messagesWhereInput]\n  NOT: messagesWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n  users: UsersRelationFilter\n}\n\nenum SortOrder {\n  asc\n  desc\n}\n\ninput messagesOrderByRelationAggregateInput {\n  _count: SortOrder\n}\n\ninput usersOrderByWithRelationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  messages: messagesOrderByRelationAggregateInput\n}\n\ninput messagesOrderByWithRelationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  users: usersOrderByWithRelationInput\n}\n\ninput messagesWhereUniqueInput {\n  id: Int\n}\n\nenum MessagesScalarFieldEnum {\n  id\n  user_id\n  message\n}\n\ntype UsersCountOutputType {\n  messages: Int!\n}\n\ntype users {\n  id: Int!\n  email: String!\n  name: String!\n  messages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]\n  _count: UsersCountOutputType\n}\n\ntype messages {\n  id: Int!\n  user_id: Int!\n  message: String!\n  users: users!\n}\n\ntype MessagesCountAggregateOutputType {\n  id: Int!\n  user_id: Int!\n  message: Int!\n  _all: Int!\n}\n\ntype MessagesAvgAggregateOutputType {\n  id: Float\n  user_id: Float\n}\n\ntype MessagesSumAggregateOutputType {\n  id: Int\n  user_id: Int\n}\n\ntype MessagesMinAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype MessagesMaxAggregateOutputType {\n  id: Int\n  user_id: Int\n  message: String\n}\n\ntype AggregateMessages {\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput messagesCountOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesAvgOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesMaxOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesMinOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n}\n\ninput messagesSumOrderByAggregateInput {\n  id: SortOrder\n  user_id: SortOrder\n}\n\ninput messagesOrderByWithAggregationInput {\n  id: SortOrder\n  user_id: SortOrder\n  message: SortOrder\n  _count: messagesCountOrderByAggregateInput\n  _avg: messagesAvgOrderByAggregateInput\n  _max: messagesMaxOrderByAggregateInput\n  _min: messagesMinOrderByAggregateInput\n  _sum: messagesSumOrderByAggregateInput\n}\n\ninput NestedFloatFilter {\n  equals: Float\n  in: [Float]\n  notIn: [Float]\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  not: NestedFloatFilter\n}\n\ninput NestedIntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput IntWithAggregatesFilter {\n  equals: Int\n  in: [Int]\n  notIn: [Int]\n  lt: Int\n  lte: Int\n  gt: Int\n  gte: Int\n  not: NestedIntWithAggregatesFilter\n  _count: NestedIntFilter\n  _avg: NestedFloatFilter\n  _sum: NestedIntFilter\n  _min: NestedIntFilter\n  _max: NestedIntFilter\n}\n\ninput NestedStringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput StringWithAggregatesFilter {\n  equals: String\n  in: [String]\n  notIn: [String]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringWithAggregatesFilter\n  _count: NestedIntFilter\n  _min: NestedStringFilter\n  _max: NestedStringFilter\n}\n\ninput messagesScalarWhereWithAggregatesInput {\n  AND: messagesScalarWhereWithAggregatesInput\n  OR: [messagesScalarWhereWithAggregatesInput]\n  NOT: messagesScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  user_id: IntWithAggregatesFilter\n  message: StringWithAggregatesFilter\n}\n\ntype MessagesGroupByOutputType {\n  id: Int!\n  user_id: Int!\n  message: String!\n  _count: MessagesCountAggregateOutputType\n  _avg: MessagesAvgAggregateOutputType\n  _sum: MessagesSumAggregateOutputType\n  _min: MessagesMinAggregateOutputType\n  _max: MessagesMaxAggregateOutputType\n}\n\ninput usersWhereUniqueInput {\n  id: Int\n  email: String\n}\n\nenum UsersScalarFieldEnum {\n  id\n  email\n  name\n}\n\ntype UsersCountAggregateOutputType {\n  id: Int!\n  email: Int!\n  name: Int!\n  _all: Int!\n}\n\ntype UsersAvgAggregateOutputType {\n  id: Float\n}\n\ntype UsersSumAggregateOutputType {\n  id: Int\n}\n\ntype UsersMinAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n}\n\ntype UsersMaxAggregateOutputType {\n  id: Int\n  email: String\n  name: String\n}\n\ntype AggregateUsers {\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ninput usersCountOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n}\n\ninput usersAvgOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersMaxOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n}\n\ninput usersMinOrderByAggregateInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n}\n\ninput usersSumOrderByAggregateInput {\n  id: SortOrder\n}\n\ninput usersOrderByWithAggregationInput {\n  id: SortOrder\n  email: SortOrder\n  name: SortOrder\n  _count: usersCountOrderByAggregateInput\n  _avg: usersAvgOrderByAggregateInput\n  _max: usersMaxOrderByAggregateInput\n  _min: usersMinOrderByAggregateInput\n  _sum: usersSumOrderByAggregateInput\n}\n\ninput usersScalarWhereWithAggregatesInput {\n  AND: usersScalarWhereWithAggregatesInput\n  OR: [usersScalarWhereWithAggregatesInput]\n  NOT: usersScalarWhereWithAggregatesInput\n  id: IntWithAggregatesFilter\n  email: StringWithAggregatesFilter\n  name: StringWithAggregatesFilter\n}\n\ntype UsersGroupByOutputType {\n  id: Int!\n  email: String!\n  name: String!\n  _count: UsersCountAggregateOutputType\n  _avg: UsersAvgAggregateOutputType\n  _sum: UsersSumAggregateOutputType\n  _min: UsersMinAggregateOutputType\n  _max: UsersMaxAggregateOutputType\n}\n\ntype Query {\n  findFirstmessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): messages\n  findManymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int, distinct: [MessagesScalarFieldEnum]): [messages]!\n  aggregatemessages(where: messagesWhereInput, orderBy: [messagesOrderByWithRelationInput], cursor: messagesWhereUniqueInput, take: Int, skip: Int): AggregateMessages!\n  groupBymessages(where: messagesWhereInput, orderBy: [messagesOrderByWithAggregationInput], by: [MessagesScalarFieldEnum]!, having: messagesScalarWhereWithAggregatesInput, take: Int, skip: Int): [MessagesGroupByOutputType]!\n  findUniquemessages(where: messagesWhereUniqueInput!): messages\n  findFirstusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): users\n  findManyusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int, distinct: [UsersScalarFieldEnum]): [users]!\n  aggregateusers(where: usersWhereInput, orderBy: [usersOrderByWithRelationInput], cursor: usersWhereUniqueInput, take: Int, skip: Int): AggregateUsers!\n  groupByusers(where: usersWhereInput, orderBy: [usersOrderByWithAggregationInput], by: [UsersScalarFieldEnum]!, having: usersScalarWhereWithAggregatesInput, take: Int, skip: Int): [UsersGroupByOutputType]!\n  findUniqueusers(where: usersWhereUniqueInput!): users\n}\n\ninput usersCreateWithoutMessagesInput {\n  email: String!\n  name: String!\n}\n\ninput usersCreateOrConnectWithoutMessagesInput {\n  where: usersWhereUniqueInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersCreateNestedOneWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  connect: usersWhereUniqueInput\n}\n\ninput messagesCreateInput {\n  message: String!\n  users: usersCreateNestedOneWithoutMessagesInput!\n}\n\ninput StringFieldUpdateOperationsInput {\n  set: String\n}\n\ninput usersUpdateWithoutMessagesInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n}\n\ninput usersUpsertWithoutMessagesInput {\n  update: usersUpdateWithoutMessagesInput!\n  create: usersCreateWithoutMessagesInput!\n}\n\ninput usersUpdateOneRequiredWithoutMessagesInput {\n  create: usersCreateWithoutMessagesInput\n  connectOrCreate: usersCreateOrConnectWithoutMessagesInput\n  upsert: usersUpsertWithoutMessagesInput\n  connect: usersWhereUniqueInput\n  update: usersUpdateWithoutMessagesInput\n}\n\ninput messagesUpdateInput {\n  message: StringFieldUpdateOperationsInput\n  users: usersUpdateOneRequiredWithoutMessagesInput\n}\n\ninput messagesCreateManyInput {\n  id: Int\n  user_id: Int!\n  message: String!\n}\n\ntype AffectedRowsOutput {\n  count: Int!\n}\n\ninput messagesUpdateManyMutationInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesCreateWithoutUsersInput {\n  message: String!\n}\n\ninput messagesCreateOrConnectWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  create: messagesCreateWithoutUsersInput!\n}\n\ninput messagesCreateManyUsersInput {\n  id: Int\n  message: String!\n}\n\ninput messagesCreateManyUsersInputEnvelope {\n  data: [messagesCreateManyUsersInput]!\n  skipDuplicates: Boolean\n}\n\ninput messagesCreateNestedManyWithoutUsersInput {\n  create: messagesCreateWithoutUsersInput\n  connectOrCreate: messagesCreateOrConnectWithoutUsersInput\n  createMany: messagesCreateManyUsersInputEnvelope\n  connect: messagesWhereUniqueInput\n}\n\ninput usersCreateInput {\n  email: String!\n  name: String!\n  messages: messagesCreateNestedManyWithoutUsersInput\n}\n\ninput messagesUpdateWithoutUsersInput {\n  message: StringFieldUpdateOperationsInput\n}\n\ninput messagesUpsertWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  update: messagesUpdateWithoutUsersInput!\n  create: messagesCreateWithoutUsersInput!\n}\n\ninput messagesUpdateWithWhereUniqueWithoutUsersInput {\n  where: messagesWhereUniqueInput!\n  data: messagesUpdateWithoutUsersInput!\n}\n\ninput messagesScalarWhereInput {\n  AND: messagesScalarWhereInput\n  OR: [messagesScalarWhereInput]\n  NOT: messagesScalarWhereInput\n  id: IntFilter\n  user_id: IntFilter\n  message: StringFilter\n}\n\ninput messagesUpdateManyWithWhereWithoutUsersInput {\n  where: messagesScalarWhereInput!\n  data: messagesUpdateManyMutationInput!\n}\n\ninput messagesUpdateManyWithoutUsersInput {\n  create: messagesCreateWithoutUsersInput\n  connectOrCreate: messagesCreateOrConnectWithoutUsersInput\n  upsert: messagesUpsertWithWhereUniqueWithoutUsersInput\n  createMany: messagesCreateManyUsersInputEnvelope\n  connect: messagesWhereUniqueInput\n  set: messagesWhereUniqueInput\n  disconnect: messagesWhereUniqueInput\n  delete: messagesWhereUniqueInput\n  update: messagesUpdateWithWhereUniqueWithoutUsersInput\n  updateMany: messagesUpdateManyWithWhereWithoutUsersInput\n  deleteMany: messagesScalarWhereInput\n}\n\ninput usersUpdateInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n  messages: messagesUpdateManyWithoutUsersInput\n}\n\ninput usersCreateManyInput {\n  id: Int\n  email: String!\n  name: String!\n}\n\ninput usersUpdateManyMutationInput {\n  email: StringFieldUpdateOperationsInput\n  name: StringFieldUpdateOperationsInput\n}\n\ntype Mutation {\n  createOnemessages(data: messagesCreateInput!): messages\n  upsertOnemessages(where: messagesWhereUniqueInput!, create: messagesCreateInput!, update: messagesUpdateInput!): messages\n  createManymessages(data: [messagesCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOnemessages(where: messagesWhereUniqueInput!): messages\n  updateOnemessages(data: messagesUpdateInput!, where: messagesWhereUniqueInput!): messages\n  updateManymessages(data: messagesUpdateManyMutationInput!, where: messagesWhereInput): AffectedRowsOutput\n  deleteManymessages(where: messagesWhereInput): AffectedRowsOutput\n  createOneusers(data: usersCreateInput!): users\n  upsertOneusers(where: usersWhereUniqueInput!, create: usersCreateInput!, update: usersUpdateInput!): users\n  createManyusers(data: [usersCreateManyInput]!, skipDuplicates: Boolean): AffectedRowsOutput\n  deleteOneusers(where: usersWhereUniqueInput!): users\n  updateOneusers(data: usersUpdateInput!, where: usersWhereUniqueInput!): users\n  updateManyusers(data: usersUpdateManyMutationInput!, where: usersWhereInput): AffectedRowsOutput\n  deleteManyusers(where: usersWhereInput): AffectedRowsOutput\n}\n\nscalar DateTime\n\nscalar Json\n\nscalar UUID\n\nscalar BigInt\n"
          }
        }
      ],
      "fieldConfigurations": [
        {
          "typeName": "users",
          "fieldName": "messages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Query",
          "fieldName": "findFirstmessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Query",
          "fieldName": "findManymessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Query",
          "fieldName": "aggregatemessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Query",
          "fieldName": "groupBymessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "by",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "having",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Query",
          "fieldName": "findUniquemessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Query",
          "fieldName": "findFirstusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Query",
          "fieldName": "findManyusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "distinct",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Query",
          "fieldName": "aggregateusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "cursor",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Query",
          "fieldName": "groupByusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "orderBy",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "by",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "having",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "take",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skip",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Query",
          "fieldName": "findUniqueusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "createOnemessages",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "upsertOnemessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "create",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "update",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "createManymessages",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skipDuplicates",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "deleteOnemessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "updateOnemessages",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "updateManymessages",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "deleteManymessages",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "createOneusers",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "upsertOneusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "create",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "update",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "createManyusers",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "skipDuplicates",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "deleteOneusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "updateOneusers",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "updateManyusers",
          "argumentsConfiguration": [
            {
              "name": "data",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            },
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        },
        {
          "typeName": "Mutation",
          "fieldName": "deleteManyusers",
          "argumentsConfiguration": [
            {
              "name": "where",
              "sourceType": 1,
              "sourcePath": [],
              "renderConfiguration": 0
            }
          ],
          "disableDefaultFieldMapping": false,
          "path": [],
          "requiresFields": [],
          "respectOverrideFieldPathFromAlias": true
        }
      ]
    },
    "s3UploadConfiguration": [],
    "corsConfiguration": {
      "allowCredentials": true,
      "allowedHeaders": [
        "*"
      ],
      "allowedMethods": [
        "GET",
        "POST"
      ],
      "allowedOrigins": [
        "http://localhost:3000"
      ],
      "exposedHeaders": [
        "*"
      ],
      "maxAge": 120
    },
    "authenticationConfig": {
      "cookieBased": {
        "providers": [
          {
            "kind": 0,
            "githubConfig": {
              "clientId": "demo",
              "clientSecret": "demo"
            },
            "id": "github"
          }
        ],
        "authorizedRedirectUris": [
          "http://localhost:3000"
        ]
      },
      "hooks": {
        "postAuthentication": false,
        "mutatingPostAuthentication": false,
        "revalidateAuthentication": false
      }
    }
  },
  "dangerouslyEnableGraphQLEndpoint": false
}